import React, { createContext, useContext, useState, useEffect } from 'react';
import AsyncStorage from '@react-native-async-storage/async-storage';

// Language translations
export const translations = {
  en: {
    // Common
    welcome: 'Welcome',
    loading: 'Loading...',
    save: 'Save',
    cancel: 'Cancel',
    delete: 'Delete',
    edit: 'Edit',
    add: 'Add',
    search: 'Search',
    filter: 'Filter',
    sort: 'Sort',
    ok: 'OK',
    yes: 'Yes',
    no: 'No',
    
    // Navigation
    dashboard: 'Dashboard',
    medicines: 'Medicines',
    inventory: 'Inventory',
    aiDoctor: 'AI Doctor',
    reports: 'Reports',
    
    // Dashboard
    todayRevenue: "Today's Revenue",
    totalSales: 'Total Sales',
    lowStockItems: 'Low Stock Items',
    totalCustomers: 'Total Customers',
    dueAmount: 'Due Amount',
    recentSales: 'Recent Sales',
    topMedicines: 'Top Selling Medicines',
    quickActions: 'Quick Actions',
    pharmacyOverview: 'Pharmacy Overview',
    
    // Medicines
    medicineName: 'Medicine Name',
    genericName: 'Generic Name',
    brandName: 'Brand Name',
    category: 'Category',
    manufacturer: 'Manufacturer',
    price: 'Price',
    stock: 'Stock',
    expiry: 'Expiry Date',
    addMedicine: 'Add Medicine',
    editMedicine: 'Edit Medicine',
    deleteMedicine: 'Delete Medicine',
    
    // Inventory
    currentStock: 'Current Stock',
    reorderLevel: 'Reorder Level',
    lastUpdated: 'Last Updated',
    stockStatus: 'Stock Status',
    inStock: 'In Stock',
    lowStock: 'Low Stock',
    outOfStock: 'Out of Stock',
    
    // Sales
    saleDate: 'Sale Date',
    customerName: 'Customer Name',
    totalAmount: 'Total Amount',
    paidAmount: 'Paid Amount',
    paymentStatus: 'Payment Status',
    paid: 'Paid',
    due: 'Due',
    partial: 'Partial',
    
    // AI Doctor Screen
    aiDoctorTitle: 'AI Doctor Assistant',
    aiDoctorSubtitle: 'Professional medical guidance for your pharmacy',
    welcomeMessage: "I'm your AI Medical Assistant, ready to help with professional medical guidance",
    
    // Medical Categories
    commonMedicines: 'ЁЯТК Common Medicines',
    symptomTreatment: 'ЁЯй║ Symptom Treatment', 
    drugSafety: 'тЪая╕П Drug Safety',
    professionalGuidance: 'ЁЯПе Professional Guidance',
    
    // Sample Queries
    paracetamolUsage: 'What is Paracetamol used for and safe dosage?',
    aspirinSideEffects: 'Tell me about Aspirin side effects',
    napaInfo: 'Napa tablet: uses, dosage, and precautions',
    amoxicillinPrescribe: 'Amoxicillin antibiotic: when to prescribe?',
    
    feverTreatment: 'Best treatment for fever and body ache',
    stomachPainMedicines: 'What medicines help with stomach pain?',
    coldCoughTreatment: 'Treatment options for cold and cough',
    bloodPressureTreatment: 'How to treat high blood pressure?',
    
    drugInteractionCheck: 'Check drug interactions between medicines',
    diabeticSafeMedicines: 'Safe medicines for diabetic patients',
    pregnancyMedicines: 'What medicines to avoid during pregnancy?',
    dangerousCombinations: 'Dangerous drug combinations to watch',
    
    referToSpecialist: 'When to refer patient to specialist?',
    emergencyProtocols: 'Emergency medicine protocols',
    dosageCalculation: 'Proper dosage calculation methods',
    patientCounseling: 'Patient counseling best practices',
    
    // Input and Actions
    inputPlaceholder: 'Ask me about medicines, symptoms, or business...',
    speak: 'Speak',
    listening: 'Listening...',
    aiAnalyzing: 'AI Doctor is analyzing...',
    
    // Voice Messages
    voiceInputError: 'Voice Input Error',
    voiceInputErrorMessage: 'Sorry, could not hear your voice. Please try again.',
    voiceInput: 'Voice Input',
    voiceInputComingSoon: 'Voice input feature coming soon. Please type your message for now.',
    voiceOutput: 'Voice Output',
    voiceOutputComingSoon: 'Voice output feature coming soon.',
    error: 'Error',
    voiceRecognitionError: 'Could not start voice recognition.',
    
    pharmacyStatus: 'Your Pharmacy Status',
  },
  
  bn: {
    // Common
    welcome: 'рж╕рзНржмрж╛ржЧрждржо',
    loading: 'рж▓рзЛржб рж╣ржЪрзНржЫрзЗ...',
    save: 'рж╕ржВрж░ржХрзНрж╖ржг',
    cancel: 'ржмрж╛рждрж┐рж▓',
    delete: 'ржорзБржЫрзЗ ржлрзЗрж▓рзБржи',
    edit: 'рж╕ржорзНржкрж╛ржжржирж╛',
    add: 'ржпрзЛржЧ ржХрж░рзБржи',
    search: 'ржЕржирзБрж╕ржирзНржзрж╛ржи',
    filter: 'ржлрж┐рж▓рзНржЯрж╛рж░',
    sort: 'рж╕рж╛ржЬрж╛ржи',
    ok: 'ржарж┐ржХ ржЖржЫрзЗ',
    yes: 'рж╣рзНржпрж╛ржБ',
    no: 'ржирж╛',
    
    // Navigation
    dashboard: 'ржбрзНржпрж╛рж╢ржмрзЛрж░рзНржб',
    medicines: 'ржУрж╖рзБржзржкрждрзНрж░',
    inventory: 'ржЗржиржнрзЗржирзНржЯрж░рж┐',
    aiDoctor: 'ржПржЖржЗ ржбрж╛ржХрзНрждрж╛рж░',
    reports: 'рж░рж┐ржкрзЛрж░рзНржЯ',
    
    // Dashboard
    todayRevenue: 'ржЖржЬржХрзЗрж░ ржЖржпрж╝',
    totalSales: 'ржорзЛржЯ ржмрж┐ржХрзНрж░ржпрж╝',
    lowStockItems: 'ржХржо рж╕рзНржЯржХ ржкржгрзНржп',
    totalCustomers: 'ржорзЛржЯ ржЧрзНрж░рж╛рж╣ржХ',
    dueAmount: 'ржмрж╛ржХрж┐ ржкрж░рж┐ржорж╛ржг',
    recentSales: 'рж╕рж╛ржорзНржкрзНрж░рждрж┐ржХ ржмрж┐ржХрзНрж░ржпрж╝',
    topMedicines: 'рж╢рзАрж░рзНрж╖ ржмрж┐ржХрзНрж░рж┐ржд ржУрж╖рзБржз',
    quickActions: 'ржжрзНрж░рзБржд ржХрж╛рж░рзНржпрж╛ржмрж▓рзА',
    pharmacyOverview: 'ржлрж╛рж░рзНржорзЗрж╕рж┐ рж╕ржВржХрзНрж╖рж┐ржкрзНржд ржмрж┐ржмрж░ржг',
    
    // Medicines
    medicineName: 'ржУрж╖рзБржзрзЗрж░ ржирж╛ржо',
    genericName: 'ржЬрзЗржирзЗрж░рж┐ржХ ржирж╛ржо',
    brandName: 'ржмрзНрж░рзНржпрж╛ржирзНржб ржирж╛ржо',
    category: 'рж╢рзНрж░рзЗржгрзА',
    manufacturer: 'ржкрзНрж░рж╕рзНрждрзБрждржХрж╛рж░ржХ',
    price: 'ржжрж╛ржо',
    stock: 'рж╕рзНржЯржХ',
    expiry: 'ржорзЗржпрж╝рж╛ржж рж╢рзЗрж╖рзЗрж░ рждрж╛рж░рж┐ржЦ',
    addMedicine: 'ржУрж╖рзБржз ржпрзЛржЧ ржХрж░рзБржи',
    editMedicine: 'ржУрж╖рзБржз рж╕ржорзНржкрж╛ржжржирж╛ ржХрж░рзБржи',
    deleteMedicine: 'ржУрж╖рзБржз ржорзБржЫрзЗ ржлрзЗрж▓рзБржи',
    
    // Inventory
    currentStock: 'ржмрж░рзНрждржорж╛ржи рж╕рзНржЯржХ',
    reorderLevel: 'ржкрзБржирж░рзНржмрж╛рж░ ржЕрж░рзНржбрж╛рж░рзЗрж░ ржорж╛рждрзНрж░рж╛',
    lastUpdated: 'рж╕рж░рзНржмрж╢рзЗрж╖ ржЖржкржбрзЗржЯ',
    stockStatus: 'рж╕рзНржЯржХрзЗрж░ ржЕржмрж╕рзНржерж╛',
    inStock: 'рж╕рзНржЯржХрзЗ ржЖржЫрзЗ',
    lowStock: 'ржХржо рж╕рзНржЯржХ',
    outOfStock: 'рж╕рзНржЯржХрзЗ ржирзЗржЗ',
    
    // Sales
    saleDate: 'ржмрж┐ржХрзНрж░ржпрж╝рзЗрж░ рждрж╛рж░рж┐ржЦ',
    customerName: 'ржЧрзНрж░рж╛рж╣ржХрзЗрж░ ржирж╛ржо',
    totalAmount: 'ржорзЛржЯ ржкрж░рж┐ржорж╛ржг',
    paidAmount: 'ржкрзНрж░ржжрждрзНржд ржкрж░рж┐ржорж╛ржг',
    paymentStatus: 'ржкрзЗржорзЗржирзНржЯрзЗрж░ ржЕржмрж╕рзНржерж╛',
    paid: 'ржкрзНрж░ржжрждрзНржд',
    due: 'ржмрж╛ржХрж┐',
    partial: 'ржЖржВрж╢рж┐ржХ',
    
    // AI Doctor Screen
    aiDoctorTitle: 'ржПржЖржЗ ржбрж╛ржХрзНрждрж╛рж░ рж╕рж╣рж╛ржпрж╝ржХ',
    aiDoctorSubtitle: 'ржЖржкржирж╛рж░ ржлрж╛рж░рзНржорзЗрж╕рж┐рж░ ржЬржирзНржп ржкрзЗрж╢рж╛ржжрж╛рж░ ржЪрж┐ржХрж┐рзОрж╕рж╛ ржкрж░рж╛ржорж░рзНрж╢',
    welcomeMessage: "ржЖржорж┐ ржЖржкржирж╛рж░ ржПржЖржЗ ржорзЗржбрж┐ржХрзЗрж▓ рж╕рж╣рж╛ржпрж╝ржХ, ржкрзЗрж╢рж╛ржжрж╛рж░ ржЪрж┐ржХрж┐рзОрж╕рж╛ ржкрж░рж╛ржорж░рзНрж╢ ржжрж┐рждрзЗ ржкрзНрж░рж╕рзНрждрзБржд",
    
    // Medical Categories
    commonMedicines: 'ЁЯТК рж╕рж╛ржзрж╛рж░ржг ржУрж╖рзБржзржкрждрзНрж░',
    symptomTreatment: 'ЁЯй║ рж▓ржХрзНрж╖ржгржнрж┐рждрзНрждрж┐ржХ ржЪрж┐ржХрж┐рзОрж╕рж╛',
    drugSafety: 'тЪая╕П ржУрж╖рзБржзрзЗрж░ ржирж┐рж░рж╛ржкрждрзНрждрж╛',
    professionalGuidance: 'ЁЯПе ржкрзЗрж╢рж╛ржжрж╛рж░ ржкрж░рж╛ржорж░рзНрж╢',
    
    // Sample Queries  
    paracetamolUsage: 'ржкрзНржпрж╛рж░рж╛рж╕рж┐ржЯрж╛ржорж▓ ржХрзАржнрж╛ржмрзЗ ржмрзНржпржмрж╣рж╛рж░ ржХрж░ржмрзЗржи ржПржмржВ ржирж┐рж░рж╛ржкржж ржорж╛рждрзНрж░рж╛?',
    aspirinSideEffects: 'ржЕрзНржпрж╛рж╕ржкрж┐рж░рж┐ржирзЗрж░ ржкрж╛рж░рзНрж╢рзНржмржкрзНрж░рждрж┐ржХрзНрж░рж┐ржпрж╝рж╛ рж╕ржорзНржкрж░рзНржХрзЗ ржмрж▓рзБржи',
    napaInfo: 'ржирж╛ржкрж╛ ржЯрзНржпрж╛ржмрж▓рзЗржЯ: ржмрзНржпржмрж╣рж╛рж░, ржорж╛рждрзНрж░рж╛ ржПржмржВ рж╕рждрж░рзНржХрждрж╛',
    amoxicillinPrescribe: 'ржЕрзНржпрж╛ржорзЛржХрзНрж╕рж┐рж╕рж┐рж▓рж┐ржи ржЕрзНржпрж╛ржирзНржЯрж┐ржмрж╛ржпрж╝рзЛржЯрж┐ржХ: ржХржЦржи ржжрж┐рждрзЗ рж╣ржмрзЗ?',
    
    feverTreatment: 'ржЬрзНржмрж░ ржУ рж╢рж░рзАрж░ ржмрзНржпржерж╛рж░ рж╕рзЗрж░рж╛ ржЪрж┐ржХрж┐рзОрж╕рж╛',
    stomachPainMedicines: 'ржкрзЗржЯ ржмрзНржпржерж╛рж░ ржЬржирзНржп ржХрзЛржи ржУрж╖рзБржз рж╕рж╛рж╣рж╛ржпрзНржп ржХрж░рзЗ?',
    coldCoughTreatment: 'рж╕рж░рзНржжрж┐-ржХрж╛рж╢рж┐рж░ ржЪрж┐ржХрж┐рзОрж╕рж╛рж░ ржмрж┐ржХрж▓рзНржкрж╕ржорзВрж╣',
    bloodPressureTreatment: 'ржЙржЪрзНржЪ рж░ржХрзНрждржЪрж╛ржкрзЗрж░ ржЪрж┐ржХрж┐рзОрж╕рж╛ ржХрзАржнрж╛ржмрзЗ ржХрж░ржмрзЗржи?',
    
    drugInteractionCheck: 'ржУрж╖рзБржзрзЗрж░ ржоржзрзНржпрзЗ ржорж┐ржерж╕рзНржХрзНрж░рж┐ржпрж╝рж╛ ржкрж░рзАржХрзНрж╖рж╛ ржХрж░рзБржи',
    diabeticSafeMedicines: 'ржбрж╛ржпрж╝рж╛ржмрзЗржЯрж┐ржХ рж░рзЛржЧрзАржжрзЗрж░ ржЬржирзНржп ржирж┐рж░рж╛ржкржж ржУрж╖рзБржз',
    pregnancyMedicines: 'ржЧрж░рзНржнрж╛ржмрж╕рзНржерж╛ржпрж╝ ржХрзЛржи ржУрж╖рзБржз ржПржбрж╝рж╛рждрзЗ рж╣ржмрзЗ?',
    dangerousCombinations: 'ржмрж┐ржкржЬрзНржЬржиржХ ржУрж╖рзБржзрзЗрж░ рж╕ржВржорж┐рж╢рзНрж░ржг ржжрзЗржЦрзБржи',
    
    referToSpecialist: 'ржХржЦржи рж░рзЛржЧрзАржХрзЗ ржмрж┐рж╢рзЗрж╖ржЬрзНржЮрзЗрж░ ржХрж╛ржЫрзЗ ржкрж╛ржарж╛ржмрзЗржи?',
    emergencyProtocols: 'ржЬрж░рзБрж░рж┐ ржУрж╖рзБржзрзЗрж░ ржирж┐ржпрж╝ржорж╛ржмрж▓рзА',
    dosageCalculation: 'рж╕ржарж┐ржХ ржорж╛рждрзНрж░рж╛ ржЧржгржирж╛рж░ ржкржжрзНржзрждрж┐',
    patientCounseling: 'рж░рзЛржЧрзА ржкрж░рж╛ржорж░рзНрж╢рзЗрж░ рж╕рзЗрж░рж╛ ржЕржирзБрж╢рзАрж▓ржи',
    
    // Input and Actions
    inputPlaceholder: 'ржУрж╖рзБржз, рж▓ржХрзНрж╖ржг ржмрж╛ ржмрзНржпржмрж╕рж╛ рж╕ржорзНржкрж░рзНржХрзЗ ржЬрж┐ржЬрзНржЮрж╛рж╕рж╛ ржХрж░рзБржи...',
    speak: 'ржХржерж╛ ржмрж▓рзБржи',
    listening: 'рж╢рзБржиржЫрж┐...',
    aiAnalyzing: 'ржПржЖржЗ ржбрж╛ржХрзНрждрж╛рж░ ржмрж┐рж╢рзНрж▓рзЗрж╖ржг ржХрж░ржЫрзЗржи...',
    
    // Voice Messages
    voiceInputError: 'ржнржпрж╝рзЗрж╕ ржЗржиржкрзБржЯ рждрзНрж░рзБржЯрж┐',
    voiceInputErrorMessage: 'ржжрзБржГржЦрж┐ржд, ржЖржкржирж╛рж░ ржХржгрзНржарж╕рзНржмрж░ рж╢рзБржирждрзЗ ржкрж╛ржЪрзНржЫрж┐ ржирж╛ред ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред',
    voiceInput: 'ржнржпрж╝рзЗрж╕ ржЗржиржкрзБржЯ',
    voiceInputComingSoon: 'ржнржпрж╝рзЗрж╕ ржЗржиржкрзБржЯ ржмрзИрж╢рж┐рж╖рзНржЯрзНржп рж╢рзАржШрзНрж░ржЗ ржЖрж╕ржЫрзЗред ржПржЦржи ржЯрж╛ржЗржк ржХрж░рзЗ рж▓рж┐ржЦрзБржиред',
    voiceOutput: 'ржнржпрж╝рзЗрж╕ ржЖржЙржЯржкрзБржЯ',
    voiceOutputComingSoon: 'ржнржпрж╝рзЗрж╕ ржЖржЙржЯржкрзБржЯ ржмрзИрж╢рж┐рж╖рзНржЯрзНржп рж╢рзАржШрзНрж░ржЗ ржЖрж╕ржЫрзЗред',
    error: 'рждрзНрж░рзБржЯрж┐',
    voiceRecognitionError: 'ржнржпрж╝рзЗрж╕ рж░рж┐ржХржЧржирж┐рж╢ржи рж╢рзБрж░рзБ ржХрж░рждрзЗ ржкрж╛рж░ржЫрж┐ ржирж╛ред',
    
    pharmacyStatus: 'ржЖржкржирж╛рж░ ржлрж╛рж░рзНржорзЗрж╕рж┐рж░ ржЕржмрж╕рзНржерж╛',
  },
};

export type Language = 'en' | 'bn';
export type TranslationKey = keyof typeof translations.en;

interface LanguageContextType {
  language: Language;
  setLanguage: (lang: Language) => void;
  t: (key: TranslationKey) => string;
  isLoading: boolean;
}

const LanguageContext = createContext<LanguageContextType | undefined>(undefined);

export const LanguageProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [language, setLanguageState] = useState<Language>('en');
  const [isLoading, setIsLoading] = useState(true);

  // Load saved language on app start
  useEffect(() => {
    loadSavedLanguage();
  }, []);

  const loadSavedLanguage = async () => {
    try {
      const savedLanguage = await AsyncStorage.getItem('app_language');
      if (savedLanguage && (savedLanguage === 'en' || savedLanguage === 'bn')) {
        setLanguageState(savedLanguage as Language);
      }
    } catch (error) {
      console.error('Error loading saved language:', error);
    } finally {
      setIsLoading(false);
    }
  };

  const setLanguage = async (lang: Language) => {
    try {
      setLanguageState(lang);
      await AsyncStorage.setItem('app_language', lang);
    } catch (error) {
      console.error('Error saving language:', error);
    }
  };

  const t = (key: TranslationKey): string => {
    return translations[language][key] || translations['en'][key] || key;
  };

  return (
    <LanguageContext.Provider value={{ language, setLanguage, t, isLoading }}>
      {children}
    </LanguageContext.Provider>
  );
};

export const useLanguage = (): LanguageContextType => {
  const context = useContext(LanguageContext);
  if (!context) {
    throw new Error('useLanguage must be used within a LanguageProvider');
  }
  return context;
};

// Language detection helper
export const detectLanguage = (text: string): Language => {
  // Simple Bengali character detection
  const bengaliPattern = /[\u0980-\u09FF]/;
  return bengaliPattern.test(text) ? 'bn' : 'en';
};

export default LanguageContext;